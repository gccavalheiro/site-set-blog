{
  "title": "Incremental Static Regeneration (ISR) no Next.js",
  "description": "Entenda o que é ISR, como funciona no Next.js e exemplos práticos de uso.",
  "image": "/assets/segundo-post.png",
  "date": "2025-06-14T13:20:00.000Z",
  "author": {
    "name": "Aspen Dokidis",
    "avatar": "/customer-01.png",
    "type": "Author",
    "_raw": {}
  },
  "body": {
    "raw": "\n# Incremental Static Regeneration (ISR) no Next.js\n\nO Incremental Static Regeneration (ISR) é uma funcionalidade do Next.js que permite atualizar páginas estáticas após o deploy, sem precisar reconstruir todo o site. Com o ISR, você pode gerar ou atualizar páginas sob demanda, melhorando a performance e a experiência do usuário.\n\n## Como funciona o ISR?\n\nNo Next.js, ao usar o ISR, você define um tempo de revalidação para cada página. Quando uma requisição chega após esse tempo, o Next.js gera uma nova versão da página em background e serve a versão atual até a nova estar pronta. Assim, o conteúdo está sempre atualizado sem perder os benefícios do static site.\n\n## Exemplo de uso\n\n```js\nexport async function getStaticProps() {\n  // Busca dados de uma API ou banco de dados\n  return {\n    props: { /* dados */ },\n    revalidate: 60, // revalida a cada 60 segundos\n  }\n}\n```\n\n## Vantagens do ISR\n- Atualização automática de páginas estáticas\n- Melhor performance\n- Menor custo de infraestrutura\n- Experiência de usuário aprimorada\n\nO ISR é ideal para blogs, e-commerces e sites que precisam de conteúdo atualizado frequentemente, mas querem manter a performance de páginas estáticas.\n\n## Desvantagens do ISR\n- Pode haver atraso na atualização do conteúdo até a próxima revalidação\n- Complexidade adicional na configuração e monitoramento\n- Possíveis inconsistências temporárias entre usuários durante a atualização\n- Nem todos os casos de uso se beneficiam do ISR (ex: páginas altamente dinâmicas)",
    "html": "<h1>Incremental Static Regeneration (ISR) no Next.js</h1>\n<p>O Incremental Static Regeneration (ISR) é uma funcionalidade do Next.js que permite atualizar páginas estáticas após o deploy, sem precisar reconstruir todo o site. Com o ISR, você pode gerar ou atualizar páginas sob demanda, melhorando a performance e a experiência do usuário.</p>\n<h2>Como funciona o ISR?</h2>\n<p>No Next.js, ao usar o ISR, você define um tempo de revalidação para cada página. Quando uma requisição chega após esse tempo, o Next.js gera uma nova versão da página em background e serve a versão atual até a nova estar pronta. Assim, o conteúdo está sempre atualizado sem perder os benefícios do static site.</p>\n<h2>Exemplo de uso</h2>\n<pre><code class=\"language-js\">export async function getStaticProps() {\n  // Busca dados de uma API ou banco de dados\n  return {\n    props: { /* dados */ },\n    revalidate: 60, // revalida a cada 60 segundos\n  }\n}\n</code></pre>\n<h2>Vantagens do ISR</h2>\n<ul>\n<li>Atualização automática de páginas estáticas</li>\n<li>Melhor performance</li>\n<li>Menor custo de infraestrutura</li>\n<li>Experiência de usuário aprimorada</li>\n</ul>\n<p>O ISR é ideal para blogs, e-commerces e sites que precisam de conteúdo atualizado frequentemente, mas querem manter a performance de páginas estáticas.</p>\n<h2>Desvantagens do ISR</h2>\n<ul>\n<li>Pode haver atraso na atualização do conteúdo até a próxima revalidação</li>\n<li>Complexidade adicional na configuração e monitoramento</li>\n<li>Possíveis inconsistências temporárias entre usuários durante a atualização</li>\n<li>Nem todos os casos de uso se beneficiam do ISR (ex: páginas altamente dinâmicas)</li>\n</ul>"
  },
  "_id": "terceiro-post.md",
  "_raw": {
    "sourceFilePath": "terceiro-post.md",
    "sourceFileName": "terceiro-post.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "terceiro-post"
  },
  "type": "Post",
  "slug": "terceiro-post"
}